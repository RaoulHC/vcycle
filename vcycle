#!/usr/bin/python
#
# vcycle - vcycle utility commands
#
#  Andrew McNab, University of Manchester.
#  Copyright (c) 2013-4. All rights reserved.
#
#  Redistribution and use in source and binary forms, with or
#  without modification, are permitted provided that the following
#  conditions are met:
#
#    o Redistributions of source code must retain the above
#      copyright notice, this list of conditions and the following
#      disclaimer. 
#    o Redistributions in binary form must reproduce the above
#      copyright notice, this list of conditions and the following
#      disclaimer in the documentation and/or other materials
#      provided with the distribution. 
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
#  CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
#  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
#  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
#  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
#  TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
#  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
#  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
#  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.
#

import uuid
import sys
import getpass
import os
import tempfile
import time
import shutil
import calendar
import novaclient.client

import VCYCLE

def stuckDeleting(vmtypeName, vmtype):

  novaClient = novaclient.client.Client('1.1', username=vmtype['username'], api_key=vmtype['password'],
                                        project_id=vmtype['project_name'], auth_url=vmtype['auth_url'])

  try:
    serversList = novaClient.servers.list(detailed=True)
  except Exception as e:
    print 'novaClient.servers.list() fails with exception ' + str(e)
    return

  for oneServer in serversList:

#      try:
#        if oneServer.metadata['vcycle-vmtype'] != vmtypeName:
#          continue
#      except:
#        continue
        
      updatedTime  = calendar.timegm(time.strptime(oneServer.updated, "%Y-%m-%dT%H:%M:%SZ"))
      
      taskState  = str(getattr(oneServer, 'OS-EXT-STS:task_state' ))
      powerState = str(getattr(oneServer, 'OS-EXT-STS:power_state'))
        
      try:
        ip = str(getattr(oneServer, 'addresses')['CERN_NETWORK'][0]['addr'])
      except:
        ip = '0.0.0.0'

      if taskState == 'deleting' and updatedTime < (time.time() - 3600):

        print (vmtype['project_name'] + '  ' +
               oneServer.name + '  ' + 
               (ip + '             ')[:17] + 
               (oneServer.status + '        ')[:9] + 
               (taskState + '               ')[:13] +
               '%.2f' % ((time.time() - updatedTime) / 3600.0))
              
                  
#
# PROGRAM MAIN
#

if __name__ == '__main__':

        VCYCLE.readConf()
        
        print 'Project,Hostname,IP,State,Task,Hours since last update'
        
        for vmtypeName, vmtype in VCYCLE.vmtypes.iteritems():
          stuckDeleting(vmtypeName, vmtype)
          
